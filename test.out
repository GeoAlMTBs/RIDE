Traceback (most recent call last):
  File "train.py", line 110, in <module>
    main(config)
  File "train.py", line 75, in main
    trainer.train()
  File "/home/3024hlh/RIDE/base/base_trainer.py", line 76, in train
    result = self._train_epoch(epoch)
  File "/home/3024hlh/RIDE/trainer/trainer.py", line 100, in _train_epoch
    output = self.model(data)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/3024hlh/RIDE/model/model.py", line 35, in forward
    x = self.backbone(x)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/3024hlh/fastmoe/examples/resnet/resnet.py", line 323, in forward
    return self.net(inp)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/container.py", line 117, in forward
    input = module(input)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/container.py", line 117, in forward
    input = module(input)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/3024hlh/fastmoe/examples/resnet/resnet.py", line 217, in forward
    Y = self.bn2(super().forward(Y))
  File "/home/3024hlh/fastmoe/fmoe/resnetconv.py", line 81, in forward
    output = super().forward(inp)
  File "/home/3024hlh/fastmoe/fmoe/layers.py", line 251, in forward
    experts=self.experts
  File "/home/3024hlh/fastmoe/fmoe/layers.py", line 64, in _fmoe_general_global_forward
    x = tree.map_structure(scatter_func, inp)
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/tree/__init__.py", line 430, in map_structure
    [func(*args) for args in zip(*map(flatten, structures))])
  File "/home/3024hlh/anaconda3/envs/ride/lib/python3.7/site-packages/tree/__init__.py", line 430, in <listcomp>
    [func(*args) for args in zip(*map(flatten, structures))])
  File "/home/3024hlh/fastmoe/fmoe/layers.py", line 57, in scatter_func
    torch.div(pos, topk, rounding_mode='floor'),
TypeError: div() got an unexpected keyword argument 'rounding_mode'
onv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (5): _Expert(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (6): _Expert(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (7): _Expert(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (gate): NaiveGate(
            (gate): Linear(in_features=32768, out_features=8, bias=True)
          )
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): Sequential(
        (0): Residual(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): CustomizedMoEResidual(
          (experts): ModuleList(
            (0): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (1): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (2): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (3): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (4): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (5): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (6): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (7): _Expert(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (gate): NaiveGate(
            (gate): Linear(in_features=16384, out_features=8, bias=True)
          )
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): Sequential(
        (0): Residual(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): CustomizedMoEResidual(
          (experts): ModuleList(
            (0): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (1): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (2): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (3): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (4): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (5): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (6): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (7): _Expert(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (gate): NaiveGate(
            (gate): Linear(in_features=8192, out_features=8, bias=True)
          )
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): Sequential(
        (0): AdaptiveAvgPool2d(output_size=(1, 1))
        (1): Flatten(start_dim=1, end_dim=-1)
      )
      (6): Sequential(
        (0): Linear(in_features=512, out_features=100, bias=True)
      )
    )
  )
)
